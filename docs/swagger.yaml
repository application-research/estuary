basePath: /
definitions:
  buckets.Bucket:
    properties:
      cid:
        type: string
      createdAt:
        type: string
      description:
        type: string
      name:
        type: string
      userId:
        type: integer
      uuid:
        type: string
    type: object
  main.ChannelIDParam:
    properties:
      id:
        type: integer
      initiator:
        type: string
      responder:
        type: string
    type: object
  main.createBucketBody:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  main.deleteContentFromBucketBody:
    properties:
      by:
        type: string
      value:
        type: string
    type: object
  main.estimateDealBody:
    properties:
      durationBlks:
        type: integer
      replication:
        type: integer
      size:
        type: integer
      verified:
        type: boolean
    type: object
  main.getApiKeysResp:
    properties:
      expiry:
        type: string
      label:
        type: string
      token:
        type: string
      tokenHash:
        type: string
    type: object
  main.importDealBody:
    properties:
      coluuid:
        type: string
      dealIDs:
        items:
          type: integer
        type: array
      dir:
        type: string
      name:
        type: string
    type: object
  types.IpfsListPinStatusResponse:
    properties:
      count:
        type: integer
      results:
        items:
          $ref: '#/definitions/types.IpfsPinStatusResponse'
        type: array
    type: object
  types.IpfsPin:
    properties:
      cid:
        type: string
      meta:
        additionalProperties: true
        type: object
      name:
        type: string
      origins:
        items:
          type: string
        type: array
    type: object
  types.IpfsPinStatusResponse:
    properties:
      created:
        type: string
      delegates:
        items:
          type: string
        type: array
      info:
        additionalProperties: true
        type: object
      pin:
        $ref: '#/definitions/types.IpfsPin'
      requestid:
        type: string
      status:
        type: string
    type: object
  util.ContentAddIpfsBody:
    properties:
      coluuid:
        type: string
      dir:
        type: string
      filename:
        type: string
      peers:
        items:
          type: string
        type: array
      root:
        type: string
    type: object
  util.ContentAddResponse:
    properties:
      cid:
        type: string
      estuary_retrieval_url:
        type: string
      estuaryId:
        type: integer
      providers:
        items:
          type: string
        type: array
      retrieval_url:
        type: string
    type: object
  util.ContentCreateBody:
    properties:
      coluuid:
        type: string
      dir:
        type: string
      location:
        type: string
      name:
        type: string
      root:
        type: string
      type:
        type: integer
    type: object
  util.HttpError:
    properties:
      code:
        type: integer
      details:
        type: string
      reason:
        type: string
    type: object
host: api.estuary.tech
info:
  contact:
    name: API Support
    url: https://docs.estuary.tech/feedback
  description: This is the API for the Estuary application.
  license:
    name: Apache 2.0 Apache-2.0 OR MIT
    url: https://github.com/application-research/estuary/blob/master/LICENSE.md
  termsOfService: http://estuary.tech
  title: Estuary API
  version: 0.0.0
paths:
  /admin/autoretrieve/init:
    post:
      description: This endpoint registers a new autoretrieve server
      parameters:
        - description: Autoretrieve's comma-separated list of addresses
          in: formData
          name: addresses
          required: true
          type: string
        - description: Autoretrieve's public key
          in: formData
          name: pubKey
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Register autoretrieve server
      tags:
        - autoretrieve
  /admin/autoretrieve/list:
    get:
      description: This endpoint lists all registered autoretrieve servers
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: List autoretrieve servers
      tags:
        - autoretrieve
  /admin/invites:
    get:
      description: This endpoint is used to list all estuary invites.
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get Estuary invites
      tags:
        - content
    post:
      description: This endpoint is used to create an estuary invite.
      parameters:
        - description: Invite code to be created
          in: path
          name: code
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Create an Estuary invite
      tags:
        - content
  /admin/peering/start:
    post:
      description: This endpoint can be used to start the Peering Service
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Start Peering
      tags:
        - admin
        - peering
        - peers
  /admin/peering/status:
    get:
      description: This endpoint can be used to check the Peering status
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Check Peering Status
      tags:
        - admin
        - peering
        - peers
  /admin/peering/stop:
    post:
      description: This endpoint can be used to stop the Peering Service
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Stop Peering
      tags:
        - admin
        - peering
        - peers
  /admin/system/config:
    get:
      description: This endpoint is used to get system configs.
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get systems(estuary/shuttle) config
      tags:
        - admin
  /admin/users:
    get:
      description: This endpoint is used to get all users.
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get all users
      tags:
        - admin
  /autoretrieve/heartbeat:
    post:
      description: This endpoint updates the lastConnection field for autoretrieve
      parameters:
        - description: Autoretrieve's auth token
          in: header
          name: token
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Marks autoretrieve server as up
      tags:
        - autoretrieve
  /buckets/:
    get:
      description: This endpoint is used to list all buckets. Whenever a user logs on estuary, it will list all buckets that the user has access to. This endpoint provides a way to list all buckets to the user.
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/buckets.Bucket'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: List all buckets
      tags:
        - buckets
    post:
      description: This endpoint is used to create a new bucket. A bucket is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new bucket.
      parameters:
        - description: Bucket name and description
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/main.createBucketBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/buckets.Bucket'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Create a new bucket
      tags:
        - buckets
  /buckets/{uuid}:
    delete:
      description: This endpoint is used to delete an existing bucket.
      parameters:
        - description: Bucket ID
          in: path
          name: uuid
          required: true
          type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Deletes a bucket
      tags:
        - buckets
    get:
      description: This endpoint is used to get contents in a bucket. If no path query param is passed
      parameters:
        - description: uuid
          in: path
          name: uuid
          required: true
          type: string
        - description: Directory
          in: query
          name: dir
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get contents in a bucket
      tags:
        - buckets
    post:
      consumes:
        - application/json
      description: This endpoint adds already-pinned contents (that have ContentIDs) to a bucket.
      parameters:
        - description: Bucket UUID
          in: path
          name: uuid
          required: true
          type: string
        - description: Content IDs to add to bucket
          in: body
          name: contentIDs
          required: true
          schema:
            items:
              type: integer
            type: array
        - description: Directory
          in: query
          name: dir
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Add contents to a bucket
      tags:
        - buckets
  /buckets/{uuid}/commit:
    post:
      description: This endpoint is used to save the contents in a bucket, producing a top-level CID that references all the current CIDs in the bucket.
      parameters:
        - description: uuid
          in: path
          name: uuid
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Produce a CID of the bucket contents
      tags:
        - buckets
  /buckets/{uuid}/contents:
    delete:
      description: This endpoint is used to delete an existing content from an existing bucket. If two or more files with the same contentid exist in the bucket, delete the one in the specified path
      parameters:
        - description: Bucket ID
          in: path
          name: uuid
          required: true
          type: string
        - description: Content ID
          in: path
          name: contentid
          required: true
          type: string
        - description: Variable to use when filtering for files (must be either 'path' or 'content_id')
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/main.deleteContentFromBucketBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Deletes a content from a bucket
      tags:
        - buckets
  /content/{id}:
    get:
      description: This endpoint returns a content by its ID
      parameters:
        - description: Content ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Content
      tags:
        - content
  /content/add:
    post:
      consumes:
        - multipart/form-data
      description: This endpoint is used to upload new content.
      parameters:
        - description: File to upload
          in: formData
          name: data
          required: true
          type: file
        - description: Filename to use for upload
          in: formData
          name: filename
          type: string
        - description: Bucket UUID
          in: query
          name: uuid
          type: string
        - description: Replication value
          in: query
          name: replication
          type: integer
        - description: Ignore Dupes true/false
          in: query
          name: ignore-dupes
          type: string
        - description: Lazy Provide true/false
          in: query
          name: lazy-provide
          type: string
        - description: Directory
          in: query
          name: dir
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ContentAddResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Add new content
      tags:
        - content
  /content/add-car:
    post:
      description: This endpoint is used to add a car object to the network. The object can be a file or a directory.
      parameters:
        - description: Car
          in: body
          name: body
          required: true
          schema:
            type: string
        - description: Ignore Dupes
          in: query
          name: ignore-dupes
          type: string
        - description: Filename
          in: query
          name: filename
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ContentAddResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Add Car object
      tags:
        - content
  /content/add-ipfs:
    post:
      description: This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
      parameters:
        - description: IPFS Body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/util.ContentAddIpfsBody'
        - description: Ignore Dupes
          in: query
          name: ignore-dupes
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Add IPFS object
      tags:
        - content
  /content/aggregated/{content}:
    get:
      description: This endpoint returns aggregated content stats
      parameters:
        - description: Content ID
          in: path
          name: content
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get aggregated content stats
      tags:
        - content
  /content/all-deals:
    get:
      description: This endpoint is used to get all deals for a user
      parameters:
        - description: Begin
          in: query
          name: begin
          required: true
          type: string
        - description: Duration
          in: query
          name: duration
          required: true
          type: string
        - description: All
          in: query
          name: all
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get all deals for a user
      tags:
        - content
  /content/bw-usage/{content}:
    get:
      description: This endpoint returns content bandwidth
      parameters:
        - description: Content ID
          in: path
          name: content
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get content bandwidth
      tags:
        - content
  /content/create:
    post:
      description: This endpoint adds a new content
      parameters:
        - description: Content
          in: body
          name: req
          required: true
          schema:
            $ref: '#/definitions/util.ContentCreateBody'
        - description: Ignore Dupes
          in: query
          name: ignore-dupes
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Add a new content
      tags:
        - content
  /content/deals:
    get:
      description: This endpoint lists all content with deals
      parameters:
        - description: Limit
          in: query
          name: limit
          type: integer
        - description: Offset
          in: query
          name: offset
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Content with deals
      tags:
        - content
  /content/ensure-replication/{datacid}:
    get:
      description: This endpoint ensures that the content is replicated to the specified number of providers
      parameters:
        - description: Data CID
          in: path
          name: datacid
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Ensure Replication
      tags:
        - content
  /content/failures/{content}:
    get:
      description: This endpoint returns all failures for a content
      parameters:
        - description: Content ID
          in: path
          name: content
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: List all failures for a content
      tags:
        - content
  /content/importdeal:
    post:
      description: This endpoint imports a deal into the shuttle.
      parameters:
        - description: Import a deal
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/main.importDealBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Import a deal
      tags:
        - content
  /content/list:
    get:
      description: This endpoint lists all content
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: List all pinned content
      tags:
        - content
  /content/read/{cont}:
    get:
      description: This endpoint reads content from the blockstore
      parameters:
        - description: CID
          in: path
          name: cont
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Read content
      tags:
        - content
  /content/staging-zones:
    get:
      description: This endpoint is used to get staging zone for user.
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get staging zone for user
      tags:
        - content
  /content/stats:
    get:
      description: This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten
      parameters:
        - description: limit
          in: query
          name: limit
          required: true
          type: string
        - description: offset
          in: query
          name: offset
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get content statistics
      tags:
        - content
  /content/status/{id}:
    get:
      description: This endpoint returns the status of a content
      parameters:
        - description: Content ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Content Status
      tags:
        - content
  /deal/estimate:
    post:
      description: This endpoint estimates the cost of a deal
      parameters:
        - description: The size of the deal in bytes, the replication factor, and the duration of the deal in blocks
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/main.estimateDealBody'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Estimate the cost of a deal
      tags:
        - deals
  /deal/info/{dealid}:
    get:
      description: This endpoint returns the deal info for a deal
      parameters:
        - description: Deal ID
          in: path
          name: dealid
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get Deal Info
      tags:
        - deals
  /deal/proposal/{propcid}:
    get:
      description: This endpoint returns the proposal for a deal
      parameters:
        - description: Proposal CID
          in: path
          name: propcid
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get Proposal
      tags:
        - deals
  /deal/query/{miner}:
    get:
      description: This endpoint returns the ask for a given CID
      parameters:
        - description: CID
          in: path
          name: miner
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Query Ask
      tags:
        - deals
  /deal/status-by-proposal/{propcid}:
    get:
      description: Get Deal Status by PropCid
      parameters:
        - description: PropCid
          in: path
          name: propcid
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get Deal Status by PropCid
      tags:
        - deals
  /deal/status/{miner}/{propcid}:
    get:
      description: This endpoint returns the status of a deal
      parameters:
        - description: Miner
          in: path
          name: miner
          required: true
          type: string
        - description: Proposal CID
          in: path
          name: propcid
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Deal Status
      tags:
        - deals
  /deal/transfer/in-progress:
    get:
      description: This endpoint returns the in-progress transfers
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Transfer In Progress
      tags:
        - deals
  /deal/transfer/status:
    post:
      description: This endpoint returns the status of a transfer
      parameters:
        - description: Channel ID
          in: body
          name: chanid
          required: true
          schema:
            $ref: '#/definitions/main.ChannelIDParam'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Transfer Status
      tags:
        - deals
  /deals/failures:
    get:
      description: This endpoint returns a list of storage failures for user
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get storage failures for user
      tags:
        - deals
  /deals/make/{miner}:
    post:
      description: This endpoint makes a deal for a given content and miner
      parameters:
        - description: Miner
          in: path
          name: miner
          required: true
          type: string
        - description: Deal Request
          in: body
          name: dealRequest
          required: true
          schema:
            type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Make Deal
      tags:
        - deals
  /deals/status/{deal}:
    get:
      description: This endpoint returns the status of a deal
      parameters:
        - description: Deal ID
          in: path
          name: deal
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get Deal Status
      tags:
        - deals
  /get/{cid}:
    get:
      description: This endpoint returns the content associated with a CID
      parameters:
        - description: Cid
          in: path
          name: cid
          required: true
          type: string
      produces:
        - application/json
      responses:
        "307":
          description: Temporary Redirect
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get Full Content by Cid
      tags:
        - public
  /net/addrs:
    get:
      description: This endpoint is used to get net addrs
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Net Addrs
      tags:
        - net
  /peering-peers:
    delete:
      description: This endpoint can be used to remove a Peer from the Peering Service
      parameters:
        - description: Peer ids
          in: body
          name: peerIds
          required: true
          schema:
            items:
              type: boolean
            type: array
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Remove peers on Peering Service
      tags:
        - admin
        - peering
        - peers
    get:
      description: This endpoint can be used to list all peers on Peering Service
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: List all Peering peers
      tags:
        - admin
        - peering
        - peers
    post:
      description: This endpoint can be used to add a Peer from the Peering Service
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Add peers on Peering Service
      tags:
        - admin
        - peering
        - peers
  /pinning/pins:
    get:
      description: This endpoint lists all pin status objects
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.IpfsListPinStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: List all pin status objects
      tags:
        - pinning
    post:
      consumes:
        - application/json
      description: This endpoint adds a pin to the IPFS daemon.
      parameters:
        - description: Pin Body {cid:cid, name:name}
          in: body
          name: pin
          required: true
          schema:
            $ref: '#/definitions/types.IpfsPin'
      produces:
        - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/types.IpfsPinStatusResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Add and pin object
      tags:
        - pinning
  /pinning/pins/{pinid}:
    delete:
      description: This endpoint deletes a pinned object.
      parameters:
        - description: Pin ID
          in: path
          name: pinid
          required: true
          type: string
      produces:
        - application/json
      responses:
        "202":
          description: ""
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Delete a pinned object
      tags:
        - pinning
    get:
      description: This endpoint returns a pin status object.
      parameters:
        - description: cid
          in: path
          name: pinid
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.IpfsPinStatusResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get a pin status object
      tags:
        - pinning
    post:
      consumes:
        - application/json
      description: This endpoint replaces a pinned object.
      parameters:
        - description: Pin ID
          in: path
          name: pinid
          required: true
          type: string
        - description: CID of new pin
          in: body
          name: cid
          required: true
          schema:
            type: string
        - description: Name (filename) of new pin
          in: body
          name: name
          schema:
            type: string
        - description: Origins of new pin
          in: body
          name: origins
          schema:
            type: string
        - description: Meta information of new pin
          in: body
          name: meta
          schema:
            type: string
      produces:
        - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/types.IpfsPinStatusResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Replace a pinned object
      tags:
        - pinning
  /public/by-cid/{cid}:
    get:
      description: This endpoint returns the content record associated with a CID
      parameters:
        - description: Cid
          in: path
          name: cid
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get Content by Cid
      tags:
        - public
  /public/deals/failures:
    get:
      description: This endpoint returns a list of storage failures
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get storage failures
      tags:
        - deals
  /public/info:
    get:
      description: This endpoint returns information about the node
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get public node info
      tags:
        - public
  /public/metrics/deals-on-chain:
    get:
      description: This endpoint is used to get deal metrics
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get deal metrics
      tags:
        - public
        - metrics
  /public/miners:
    get:
      description: This endpoint returns all miners
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get all miners
      tags:
        - public
        - net
  /public/miners/deals/{miner}:
    get:
      description: This endpoint returns all miners deals
      parameters:
        - description: Filter by miner
          in: path
          name: miner
          required: true
          type: string
        - description: Ignore Failed
          in: query
          name: ignore-failed
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get all miners deals
      tags:
        - public
        - miner
  /public/miners/failures/{miner}:
    get:
      description: This endpoint returns all miners
      parameters:
        - description: Filter by miner
          in: path
          name: miner
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get all miners
      tags:
        - public
        - net
  /public/miners/stats/{miner}:
    get:
      description: This endpoint returns miner stats
      parameters:
        - description: Filter by miner
          in: path
          name: miner
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get miner stats
      tags:
        - public
        - miner
  /public/miners/storage/query/{miner}:
    get:
      description: This endpoint returns the ask for a given CID
      parameters:
        - description: CID
          in: path
          name: miner
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Query Ask
      tags:
        - deals
  /public/net/addrs:
    get:
      description: This endpoint is used to get net addrs
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: Net Addrs
      tags:
        - public
        - net
  /public/net/peers:
    get:
      description: This endpoint is used to get net peers
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Net Peers
      tags:
        - public
        - net
  /public/stats:
    get:
      description: This endpoint is used to get public stats.
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Public stats
      tags:
        - public
  /user/api-keys:
    get:
      description: This endpoint is used to get API keys for a user. In estuary, each user can be given multiple API keys (tokens). This endpoint can be used to retrieve all available API keys for a given user.
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.getApiKeysResp'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get API keys for a user
      tags:
        - User
    post:
      description: This endpoint is used to create API keys for a user. In estuary, each user is given an API key to access all features.
      parameters:
        - description: Expiration - Expiration - Valid time units are ns, us (or µs),  ms,  s,  m,  h.  for  example  300h
          in: query
          name: expiry
          type: string
        - description: Permissions -- currently unused
          in: query
          name: perms
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.getApiKeysResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Create API keys for a user
      tags:
        - User
  /user/api-keys/{key_or_hash}:
    delete:
      description: This endpoint is used to revoke a user API key. In estuary, every user is assigned with an API key, this API key is generated and issued for each user and is primarily used to access all estuary features. This endpoint can be used to revoke the API key that's assigned to the user. Revoked API keys are completely deleted and are not recoverable.
      parameters:
        - description: Key or Hash
          in: path
          name: key_or_hash
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Revoke a User API Key.
      tags:
        - User
  /user/export:
    get:
      description: This endpoint is used to get API keys for a user.
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Export user data
      tags:
        - User
  /user/stats:
    get:
      description: This endpoint is used to geet stats for the current user.
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Get stats for the current user
      tags:
        - User
swagger: "2.0"
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
security:
  - bearerAuth: []

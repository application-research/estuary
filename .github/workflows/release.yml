name: Release

on:
  push:
    # run only against tags
    tags:
      - '*'

permissions:
  contents: write

jobs:
  build_linux_amd64:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        version: ['linux/amd64']
        include:
        # add the GO naming convention for OS ($GOOS) and architecture ($GOARCH)
        # instead of using Linux' naming convention (version items).
          - version: linux/amd64
            OS: linux
            ARCH: amd64
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Build binary for ${{ matrix.version }}
      run: |
        docker run --rm -v "$PWD":/usr/est/build -w /usr/est/build --platform=${{ matrix.version }} jlogelin/estuary-base:latest /bin/sh -c "make"
    - name: Prepare build artifact for stashing
      run: |
        mkdir release
        mv ./estuary ./estuary-shuttle ./barge ./benchest ./bsget ./shuttle-proxy ./release
    # The build artifact can be identified by the trailing sha of the git commit
    - name: Stash the build artifact
      uses: actions/upload-artifact@v1
      with:
        name: estuary-${{ matrix.OS }}-${{ matrix.ARCH }}-${{ github.sha }}
        path: ./release
  
  build_linux_arm64:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        version: ['linux/arm64']
        include:
        # add the GO naming convention for OS ($GOOS) and architecture ($GOARCH)
        # instead of using Linux' naming convention (version items).
          - version: linux/arm64
            OS: linux
            ARCH: arm64
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    
    - name: Install QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: linux/arm64

    - name: Build binary for ${{ matrix.version }}
      run: |
        docker run --rm -v "$PWD":/usr/est/build -w /usr/est/build --platform=${{ matrix.version }} jlogelin/estuary-base:linux-arm64 /bin/sh -c "cp /build/* extern/filecoin-ffi/ && touch extern/filecoin-ffi/.install-filcrypto && make"
    
    - name: Prepare build artifact for stashing
      run: |
        mkdir release
        mv ./estuary ./estuary-shuttle ./barge ./benchest ./bsget ./shuttle-proxy ./release
    
    # The build artifact can be identified by the trailing sha of the git commit
    - name: Stash the build artifact
      uses: actions/upload-artifact@v1
      with:
        name: estuary-${{ matrix.OS }}-${{ matrix.ARCH }}-${{ github.sha }}
        path: ./release
  
  build_macos_amd64:
    runs-on: macos-latest
    strategy:
      matrix:
        version: ['darwin-amd64']
        include:
          - version: darwin-amd64
            OS: darwin
            ARCH: amd64
    steps:
    - name: Set up Go 1.17
      uses: actions/setup-go@v1
      id: go
      with:
        go-version: 1.17
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Install dependencies
      run: |
        brew install bzr jq pkg-config rustup hwloc
        cargo install cargo-lipo
    - name: Build binary for macOS
      run: |
        export PATH=/System/Volumes/Data/Users/runner/go/bin:$PATH
        make
    - name: Prepare build artifact for stashing
      run: |
        mkdir release
        mv ./estuary ./estuary-shuttle ./barge ./benchest ./bsget ./shuttle-proxy ./release
    # The build artifact can be identified by the trailing sha of the git commit
    - name: Stash the build artifact
      uses: actions/upload-artifact@v1
      with:
        name: estuary-${{ matrix.OS }}-${{ matrix.ARCH }}-${{ github.sha }}
        path: ./release

  # A Github release is created whenever the git reference contains a tag, starting with 'v*' (e.g. v0.4.2)
  # And the previous build jobs have been successful
  create_release:
    runs-on: ubuntu-20.04
    needs: [build_linux_amd64, build_linux_arm64, build_macos_amd64]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false
    # since jobs can not share any variables we have to copy the URL of the created Github release
    # into a file and stash it as an artifact
    - name: Copy release URL into file
      run: |
        mkdir release
        printf "%s" "${{ steps.create_release.outputs.upload_url }}" > release/url.txt
    - name: Stash file containing the release URL as an artifact
      uses: actions/upload-artifact@v1
      with:
        name: release-url
        path: ./release

  # In this job we upload the release artifacts to the corresponding release
  upload:
    runs-on: ubuntu-20.04
    needs: create_release # release must be created before this job can start
    strategy:
      matrix:
        version: ['linux-amd64', 'linux-arm64', 'darwin-amd64']
        # add the GO naming convention for OS ($GOOS) and architecture ($GOARCH)
        # instead of using Linux' naming convention (version items).
        include:
          - version: linux-amd64
            OS: linux
            ARCH: amd64
          - version: linux-arm64
            OS: linux
            ARCH: arm64
          - version: darwin-amd64
            OS: darwin
            ARCH: amd64
    steps:
    # Since Github actions (currently) doesn't provide a slugged version of the git tag we have to
    # create it by ourselves. It is then made available to other steps in this job as a step.outputs
    # variable
    - name: Get the version (git tag)
      id: get_version
      run: |
        echo ${GITHUB_REF/refs\/tags\//}
        echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: Retrieve stashed intermediary build artifact
      uses: actions/download-artifact@v1
      with:
        name: estuary-${{ matrix.OS }}-${{ matrix.ARCH }}-${{ github.sha }}
    # rename the retrieved intermediary artifact and prepare zip file
    - name: Prepare release artifact
      env:
        VERSION: ${{ steps.get_version.outputs.VERSION }}
      run: |
        mv ./estuary-${{ matrix.OS }}-${{ matrix.ARCH }}-${{ github.sha }}/* .
        test -f ./estuary && chmod +x ./estuary
        test -f ./estuary-shuttle && chmod +x ./estuary-shuttle
        test -f ./barge && chmod +x ./barge
        test -f ./benchest && chmod +x ./benchest
        test -f ./bsget && chmod +x ./bsget
        test -f ./shuttle-proxy && chmod +x ./shuttle-proxy
        tar -czvf estuary-$VERSION-${{ matrix.OS }}-${{ matrix.ARCH }}.tar.gz ./*
        sha256sum estuary-$VERSION-${{ matrix.OS }}-${{ matrix.ARCH }}.tar.gz > estuary-$VERSION-${{ matrix.OS }}-${{ matrix.ARCH }}.tar.gz.sha256
    # Download the previously uploaded artifact which contains the release URL
    - name: Retrieve stashed release URL
      uses: actions/download-artifact@v1
      with:
        name: release-url
    # Write content of downloaded file (a string which contains the release URL) into a step.outputs variable
    - name: Read release URL
      id: get_release_url
      run: echo ::set-output name=URL::$(cat release-url/url.txt)
    # This step is only needed because the upload-release-asset currently doesn't support
    # environment variables. Therefore they must be written and referenced through step.outputs
    - name: Prepare artifact metadata
      id: prepare_artifact_metadata
      env:
        VERSION: ${{ steps.get_version.outputs.VERSION }}
      run: |
        echo ::set-output name=ARTIFACT_PATH::./estuary-$VERSION-${{ matrix.OS }}-${{ matrix.ARCH }}.tar.gz
        echo ::set-output name=ARTIFACT_NAME::estuary-$VERSION-${{ matrix.OS }}-${{ matrix.ARCH }}.tar.gz
        echo ::set-output name=ARTIFACT_PATH_SHA::./estuary-$VERSION-${{ matrix.OS }}-${{ matrix.ARCH }}.tar.gz.sha256
        echo ::set-output name=ARTIFACT_NAME_SHA::estuary-$VERSION-${{ matrix.OS }}-${{ matrix.ARCH }}.tar.gz.sha256
    # Finally upload the artifact to the corresponding release
    - name: Upload Release Artifact ${{ matrix.version }}
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_url.outputs.URL }}
        asset_path: ${{ steps.prepare_artifact_metadata.outputs.ARTIFACT_PATH }}
        asset_name: ${{ steps.prepare_artifact_metadata.outputs.ARTIFACT_NAME }}
        asset_content_type: application/gzip
    
    - name: Upload Release Artifact Sums ${{ matrix.version }}
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_url.outputs.URL }}
        asset_path: ${{ steps.prepare_artifact_metadata.outputs.ARTIFACT_PATH_SHA }}
        asset_name: ${{ steps.prepare_artifact_metadata.outputs.ARTIFACT_NAME_SHA }}
        asset_content_type: application/gzip
